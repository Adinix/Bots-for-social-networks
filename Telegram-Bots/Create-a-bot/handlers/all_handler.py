from bot_instance import bot
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from data_base import db
from modules.func import get_chat_lang
from keyboards.inline_keyboards import lang_ikb, free_games_ikb, order_bot_ikb, woth_bot_ikb, main_menu_ikb, change_language_ikb, main_menu_back_ikb, main_or_questions_menu_ikb, main_or_help_menu_ikb
from asyncio import sleep
from json import load

dict_msg_id = dict()


router = Router()

# ! command start
@router.message(Command(commands='start'))
async def start(msg: types.Message, state: FSMContext):

    await state.clear()

    lang = await get_chat_lang(msg.chat.id)

    if not lang:

        await msg.answer(text="<b>Choose language:</b>",
                            parse_mode=ParseMode.HTML,
                            reply_markup=lang_ikb())

    else:
        
        if lang == "en":
            await msg.answer(text="<b>Main menu!</b>", 
                            parse_mode=ParseMode.HTML, 
                            reply_markup=main_menu_ikb(lang))

        elif lang == "ua":
            await msg.answer(text="<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é!</b>", 
                            parse_mode=ParseMode.HTML, 
                            reply_markup=main_menu_ikb(lang))

        elif lang == "ru":
            await msg.answer(text="<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>", 
                            parse_mode=ParseMode.HTML,
                            reply_markup=main_menu_ikb(lang))
    
    await msg.delete()

    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)





@router.callback_query(lambda x: x.data and x.data.startswith("choice_lang"))
async def start_settings(call: types.CallbackQuery):

    lang = call.data.split("_")[-1]


    if call.message.chat.id > 0:
        await db.insert_settings(call.message.chat.id,
                                lang,
                                call.from_user.first_name,
                                call.from_user.last_name,
                                call.from_user.username,
                                call.from_user.language_code,
                                type=call.message.chat.type)

    else:
        if call.message.chat.all_members_are_administrators == True:
            all_members_are_administrators = 1
        else: 
            all_members_are_administrators = 0

        await db.insert_settings(call.message.chat.id,
                                lang, 
                                title=call.message.chat.title, 
                                type=call.message.chat.type, 
                                all_members_are_administrators=all_members_are_administrators)


    if lang == "en":
        await bot.edit_message_text(chat_id=call.message.chat.id, 
        message_id=call.message.message_id, 
        text='üá∫üá∏ You have chosen English!')

        await start_hello(lang, call.message.chat.id, call.message.from_user.last_name)
        await bot.send_message(chat_id=call.message.chat.id, 
                                text="<b>Main menu!</b>", 
                                parse_mode=ParseMode.HTML, 
                                reply_markup=main_menu_ikb(lang))

    elif lang == "ua":
        await bot.edit_message_text(chat_id=call.message.chat.id, 
        message_id=call.message.message_id, 
        text='üá∫üá¶ –í–∏ –æ–±—Ä–∞–ª–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É!')

        await start_hello(lang, call.message.chat.id, call.message.from_user.last_name)
        await bot.send_message(chat_id=call.message.chat.id, 
                                text="<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é!</b>", 
                                parse_mode=ParseMode.HTML, 
                                reply_markup=main_menu_ikb(lang))        

    elif lang == "ru":
        await bot.edit_message_text(chat_id=call.message.chat.id, 
        message_id=call.message.message_id, 
        text='üá∑üá∫ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å–∫–∏–π —è–∑—ã–∫!')

        await start_hello(lang, call.message.chat.id, call.message.from_user.last_name)
        await bot.send_message(chat_id=call.message.chat.id, 
                                text="<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>", 
                                parse_mode=ParseMode.HTML, 
                                reply_markup=main_menu_ikb(lang))
        
    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



async def start_hello(lang, chat_id, last_name):

    if lang == "en":
        await bot.send_message(chat_id=chat_id, text=f"""Welcome!\n\
I'll let you know when free games are available.\n\
You can also type /free to see all the free games I've found.\n\
If something is not clear, write the /help command.""",
                                    )

    elif lang == "ua":
        await bot.send_message(chat_id=chat_id, text=f"""–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n\
–Ø –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª—é, –∫–æ–ª–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —ñ–≥—Ä–∏.
–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /free, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —ñ–≥—Ä–∏, —è–∫—ñ –º–µ–Ω—ñ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏.\n\
–Ø–∫—â–æ —â–æ—Å—å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ –ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.""",
                                    )

    elif lang == "ru":
        await bot.send_message(chat_id=chat_id, text=f'üìú –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>{last_name}</b>!\nüìå –°–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å \
–±–æ—Ç–∞ —Å–æ–≤—Å–µ–º –¥–µ—à–µ–≤–æ, –ø–æ —Ç–æ–º—É —á—Ç–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ–ø—ã—Ç–µ–Ω, –Ω–µ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏ \
–¥–µ–ª–∞–µ—Ç –∏—Ö –¥–æ–≤–æ–ª—å–Ω–æ –¥–æ–ª–≥–æ (2-5 –¥–Ω–µ–π).\nüìå –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ /help (–ü–æ–º–æ—â—å). \
–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è".', parse_mode=ParseMode.HTML)



# ! –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞
@router.callback_query(lambda call: call.data == "order")
async def order_bot(call: types.CallbackQuery):

    chat_id = call.message.chat.id
    msg_id = call.message.message_id
    lang = await get_chat_lang(chat_id)

    if lang == "ne":
        await bot.edit_message_text(chat_id=chat_id,
                              message_id=msg_id,
                              parse_mode=ParseMode.HTML,
                              reply_markup=order_bot_ikb(lang),
                              text="üìå If you want to order a bot, then there is a lot to discuss and you must tell us which bot you want. " +
                              "What would I write, click on the button under the message.")

    elif lang == "ua":
        await bot.edit_message_text(chat_id=chat_id,
                              message_id=msg_id,
                              parse_mode=ParseMode.HTML,
                              reply_markup=order_bot_ikb(lang),
                              text="üìå –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –±–æ—Ç–∞, —Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±–∞–≥–∞—Ç–æ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ —ñ –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —è–∫–æ–≥–æ—Å—å –±–æ—Ç–∞ —Ö–æ—á–µ—Ç–µ. " +
                              "–©–æ –± –º–µ–Ω—ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")

    elif lang == "ru":
        await bot.edit_message_text(chat_id=chat_id,
                              message_id=msg_id,
                              parse_mode=ParseMode.HTML,
                              reply_markup=order_bot_ikb(lang),
                              text="üìå –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞, —Ç–æ –Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ–µ –æ–±–≥–æ–≤–æ—Ä–∏—Ç—å –∏ –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–æ–∑–∫–∞–∑–∞—Ç—å –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ö–æ—Ç–∏—Ç–µ. " + 
                              "–ß—Ç–æ –±—ã –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

        
    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



# ! command help
@router.callback_query(F.data == "help")
async def help(call: types.CallbackQuery):

    chat_id = call.message.chat.id
    lang = await get_chat_lang(chat_id)
    message_id = call.message.message_id

    if lang == "en":
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                text="""üìö List of commands:
/start - Bot welcome message
/help - If you need help
/free - View free games

If something is not clear to you, you can contact technical support (button under the message)""",
reply_markup=main_menu_back_ikb(lang))


    elif lang == "ua":
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                text="""üìö –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/start - –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
/help - –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞
/free - –ü–µ—Ä–µ–≥–ª—è–¥ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —ñ–≥–æ—Ä

–Ø–∫—â–æ –≤–∞–º —â–æ—Å—å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, —Ç–æ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫—É (–∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º))""",
reply_markup=main_menu_back_ikb(lang))


    elif lang == "ru":
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                text="""üìö –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
/help  - –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å
/free  - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥–æ—Ä

–ï—Å–ª–∏ –≤–∞–º —á—Ç–æ —Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É (–∫–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)""",
reply_markup=main_menu_back_ikb(lang))
        
    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



# ! –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
@router.callback_query(F.data == "questions")
async def questions(call: types.CallbackQuery, state: FSMContext):

    await state.clear()

    chat_id = call.message.chat.id
    message_id = call.message.message_id
    lang = await get_chat_lang(chat_id)

    if lang == "en":
        await bot.edit_message_text(chat_id=chat_id,
                                message_id=message_id,
                                text="üìå <b>Here many of you can find answers to your questions.!</b>",
                                parse_mode=ParseMode.HTML,
                                reply_markup=woth_bot_ikb(lang))

    elif lang == "ua":
        await bot.edit_message_text(chat_id=chat_id,
                                message_id=message_id,
                                text="üìå <b>–¢—É—Ç –±–∞–≥–∞—Ç–æ —Ö—Ç–æ –∑ –≤–∞—Å –º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!</b>",
                                parse_mode=ParseMode.HTML,
                                reply_markup=woth_bot_ikb(lang))

    elif lang == "ru":
        await bot.edit_message_text(chat_id=chat_id,
                                message_id=message_id,
                                text="üìå <b>–ó–¥–µ—Å—å –º–Ω–æ–≥–∏–µ –∏–∑ –≤–∞—Å –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!</b>",
                                parse_mode=ParseMode.HTML,
                                reply_markup=woth_bot_ikb(lang))

    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



@router.callback_query(F.data.startswith("???"))
async def questions_call(call: types.CallbackQuery):

    chat_id = call.message.chat.id
    message_id = call.message.message_id
    lang = await get_chat_lang(chat_id)

    question = call.data.split(" ")[1]

    if question == "kak_poishodit_zakaz":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=message_id, 
                                    text="‚ùì –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑",
                                    reply_markup=main_or_questions_menu_ikb(lang))

    elif question == "skolko_stoit_hosting":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=message_id, 
                                    text="‚ùì –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ö–æ—Å—Ç–∏–Ω–≥ –±–æ—Ç–∞",
                                    reply_markup=main_or_questions_menu_ikb(lang))

    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



# ! –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–∏ –ø—Ä–æ—ç–∫—Ç—ã
@router.callback_query(F.data == "proje—Åt")
async def project_bots(call: types.CallbackQuery):

    chat_id = call.message.chat.id
    msg_id = call.message.message_id
    lang = await get_chat_lang(chat_id)


    if lang == "en":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=msg_id, 
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=free_games_ikb(lang),
                                    text="ü§ñ <b>My telegram bots:</b>\n\n" +
                                    
                                    "1Ô∏è‚É£ <b>Free Games</b>\n" +
                                    "Bot notifies you when new free games appear in " +
                                    "<b><u>Steam</u></b>, <b><u>GOG</u></b> and <b><u>Epic Games</u></b>. " +
                                    " By sending the title, picture and link (link to get the game) to the game.\n\n" +

                                    "2Ô∏è‚É£ <b>üí¨ Communication ...</b>\n" +
                                    "Feedback bot. When you write to the bot, it forwards the message to me," +
                                    "and then I already reply to the user's message in a PM with the bot and the bot sends it back to the person.")

    elif lang == "ua":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=msg_id, 
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=free_games_ikb(lang),
                                    text="ü§ñ <b>–ú–æ—ó —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∏:</b>\n\n" +
                                    
                                    "1Ô∏è‚É£ <b>Free Games</b>\n" +
                                    "–ë–æ—Ç –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª—è—î –∫–æ–ª–∏ –∑'—è–≤–ª—è—é—Ç—å—Å—è –Ω–æ–≤—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —ñ–≥—Ä–∏ –≤ "
                                    "<b><u>Steam</u></b>, <b><u>GOG</u></b> —Ç–∞ <b><u>Epic Games</u></b>. " +
                                    " –ù–∞–¥—Å–∏–ª–∞—é—á–∏ –Ω–∞–∑–≤—É, –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∏) –Ω–∞ –≥—Ä—É.\n\n" +

                                    "2Ô∏è‚É£ <b>üí¨ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è ...</b>\n" +
                                    "–ë–æ—Ç –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É. –ö–æ–ª–∏ –≤–∏ –ø–∏—à—ñ—Ç—å –±–æ—Ç—É, –≤—ñ–Ω –ø–µ—Ä–µ—Å–∏–ª–∞—î —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω—ñ," +
                                    "–ê –ø—ñ—Å–ª—è —è –≤–∂–µ –≤ –ª—Å –∑ –±–æ—Ç–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –±–æ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –π–æ–≥–æ –ª—é–¥–∏–Ω—ñ –Ω–∞–∑–∞–¥.")

    elif lang == "ru":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=msg_id, 
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=free_games_ikb(lang),
                                    text="ü§ñ <b>–ú–æ–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã:</b>\n\n" + 
                                    
                                    "1Ô∏è‚É£ <b>Free Games</b>\n" +
                                    "–ë–æ—Ç –≤–∞–º —Å–æ–æ–±—â—è–µ—Ç –∫–æ–≥–¥–∞ –ø–æ—è–≤–ª—è—é—Ç—å—Å—è –Ω–æ–≤—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –≤ " +
                                    "<b><u>Steam</u></b>, <b><u>GOG</u></b> –∏ <b><u>Epic Games</u></b>." +
                                    " –ü—Ä–∏—Å—ã–ª–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å—Å—ã–ª–∫—É (—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä—ã) –Ω–∞ –∏–≥—Ä—É.\n\n" +

                                    "2Ô∏è‚É£ <b>üí¨ –û–±—â–µ–Ω–∏–µ ...</b>\n" +
                                    "–ë–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ö–æ–≥–¥–∞ –≤—ã –ø–∏—à–∏—Ç–µ –±–æ—Ç—É, –æ–Ω –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ," +
                                    "–∞ –ø–æ—Å–ª–µ —è —É–∂–µ –≤ –ª—Å —Å –±–æ—Ç–æ–º –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ —á–µ–ª–æ–≤–µ–∫—É –æ–±—Ä–∞—Ç–Ω–æ.")
    
    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



# ! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
@router.callback_query(F.data == "change_language")
async def change_language(call: types.CallbackQuery):

    chat_id = call.message.chat.id
    lang = await get_chat_lang(chat_id)

    if lang == "en":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=call.message.message_id, 
                                    text="üá∫üá∏ <b>Now you have Russian selected, you can choose another:</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=change_language_ikb())

    elif lang == "ua":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=call.message.message_id, 
                                    text="üá∫üá¶ <b>–ó–∞—Ä–∞–∑ —É –≤–∞—Å –æ–±—Ä–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π, –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π:</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=change_language_ikb())

    elif lang == "ru":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=call.message.message_id, 
                                    text="üá∑üá∫ <b>–°–µ–π—á–∞—Å —É –≤–∞—Å –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π:</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=change_language_ikb())
    
    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



@router.callback_query(F.data.startswith("update_"))
async def update_language(call: types.CallbackQuery):

    chat_id = call.message.chat.id
    lang = call.data.split("_")[1]

    await db.insert_settings(chat_id, lang)

    if lang == "en":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=call.message.message_id,
                                    text="<b>You have successfully changed the language to English!</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=change_language_ikb())

    elif lang == "ua":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=call.message.message_id,
                                    text="<b>–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–∏–ª–∏ –º–æ–≤—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É!</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=change_language_ikb())

    elif lang == "ru":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=call.message.message_id,
                                    text="<b>–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π!</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=change_language_ikb())
    
    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



# ! –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back")
async def main_menu_call(call: types.CallbackQuery, state: FSMContext):

    await state.clear()

    message_id = call.message.message_id
    chat_id = call.message.chat.id
    lang = await get_chat_lang(chat_id)

    if lang == "en":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=message_id,
                                    text="<b>Main menu!</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=main_menu_ikb(lang))

    elif lang == "ua":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=message_id,
                                    text="<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é!</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=main_menu_ikb(lang))

    elif lang == "ru":
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=message_id,
                                    text="<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>",
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=main_menu_ikb(lang))

    await sleep(24 * 60 * 60)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



# ! –û—Ç–≤–µ—Ç—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ
@router.message()
async def technical_support_reply(msg: types.Message):
    
    if msg.reply_to_message:

        with open("config.json", "r") as f:
            config = load(f)
            id_support = config["technical_support_chat_id"]

        if str(msg.chat.id) == str(id_support):
            piple_id = msg.reply_to_message.text.split("\n")[0] # –ü–æ–ª—É—á–∞–µ–º id —á–µ–ª–æ–≤–µ–∫–∞

            await bot.send_message(chat_id=piple_id, text=f"{msg.text}\n\n<b></b>", parse_mode=ParseMode.HTML)
        
        else: 
            await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)

    else:
        await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)

